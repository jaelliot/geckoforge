---
description: Systematic troubleshooting procedures organized by component and layer
globs: ["docs/troubleshooting/**/*.md"]
alwaysApply: false
version: 0.3.0
---

## Use when
- Debugging build, boot, or runtime issues
- System behaving unexpectedly
- Creating troubleshooting documentation
- Diagnosing performance problems

## Troubleshooting Philosophy

**Systematic debugging > Random fixes**

1. Identify the layer (ISO, first-boot, user-setup, Home-Manager)
2. Check logs for that layer
3. Isolate the component
4. Test in minimal environment
5. Document findings in daily summary

---

## Quick Diagnostic Commands

```bash
# System status overview
sudo systemctl status
journalctl -b -p err  # Boot errors

# Layer-specific logs
journalctl -u geckoforge-*  # First-boot services
docker ps -a  # Container status
home-manager generations  # Nix history

# Hardware
nvidia-smi  # GPU status
lspci | grep -i nvidia  # GPU detection
df -h  # Disk space
free -h  # Memory

# Network
ip a  # Network interfaces
ping -c 3 1.1.1.1  # Connectivity
resolvectl status  # DNS configuration
```

---

## Layer 1: ISO Build Issues

### Symptom: ISO Build Fails

#### Check 1: KIWI Configuration
```bash
# Validate XML syntax
xmllint --noout profiles/leap-15.6/kde-nvidia/config.kiwi.xml

# Check for typos in package names
grep '<package>' profiles/leap-15.6/kde-nvidia/config.kiwi.xml
```

**Common causes:**
- Malformed XML (unclosed tags)
- Non-existent package names
- Incorrect repository URLs

#### Check 2: Package Availability
```bash
# Test if packages exist in repos
zypper search package-name

# Check repository connectivity
zypper refresh
```

**Fix:**
```bash
# Correct package name
$EDITOR profiles/leap-15.6/kde-nvidia/config.kiwi.xml

# Rebuild
./tools/kiwi-build.sh profiles/leap-15.6/kde-nvidia
```

### Symptom: ISO Too Large (>4GB)

#### Check: Package List
```bash
# List all packages in config
xmllint --xpath '//package/text()' profiles/leap-15.6/kde-nvidia/config.kiwi.xml | sort

# Look for:
# - Development packages (-devel)
# - Documentation packages (-doc)
# - Unnecessary desktop environments
```

**Fix:**
- Remove development packages (install via Nix instead)
- Remove duplicate packages
- Use `--delete` for unneeded packages

### Symptom: Missing Files in ISO

#### Check: File Overlays
```bash
# Verify overlay files exist
ls -R profiles/leap-15.6/kde-nvidia/root/

# Check file paths in config.kiwi.xml
grep '<file name' profiles/leap-15.6/kde-nvidia/config.kiwi.xml
```

**Fix:**
- Ensure source files exist in `root/` directory
- Verify paths in `<file name="">` match actual files

---

## Layer 2: First-Boot Issues

### Symptom: First-Boot Services Fail

#### Check 1: Service Status
```bash
# Check first-boot services
sudo systemctl status geckoforge-firstboot.service
sudo systemctl status geckoforge-nix.service

# View logs
sudo journalctl -u geckoforge-firstboot.service -b
sudo journalctl -u geckoforge-nix.service -b
```

#### Check 2: NVIDIA Driver Installation
```bash
# Check if NVIDIA GPU detected
lspci | grep -i nvidia

# Check driver installation
nvidia-smi

# If failed, check logs
sudo journalctl -u geckoforge-firstboot.service | grep -i nvidia
```

**Common causes:**
- GPU not detected (wrong hardware)
- NVIDIA repo not configured
- Network issues during installation

**Fix:**
```bash
# Manual NVIDIA installation
sudo zypper install -y nvidia-open-driver-G06-signed

# Reboot
sudo reboot
```

#### Check 3: Nix Installation
```bash
# Check if Nix installed
command -v nix

# Check daemon status
sudo systemctl status nix-daemon

# Check for errors
sudo journalctl -u geckoforge-nix.service
```

**Common causes:**
- Network issues during installation
- `/nix` directory permission problems
- Installer script failure

**Fix:**
```bash
# Manual Nix installation
sh <(curl -L https://nixos.org/nix/install) --daemon

# Enable flakes
echo "experimental-features = nix-command flakes" | sudo tee -a /etc/nix/nix.conf

# Restart daemon
sudo systemctl restart nix-daemon
```

---

## Layer 3: User Setup Issues

### Symptom: Docker Installation Fails

#### Check 1: Repository Access
```bash
# Check if Docker repo configured
zypper repos | grep -i docker

# Refresh repos
sudo zypper refresh
```

#### Check 2: Podman Conflicts
```bash
# Check if Podman installed
command -v podman

# Remove if present
sudo zypper remove -y podman buildah skopeo
```

**Fix:**
```bash
# Run setup script
./scripts/setup-docker.sh

# Verify installation
docker run hello-world

# Check user in docker group
groups | grep docker
```

### Symptom: NVIDIA Container Toolkit Fails

#### Check 1: NVIDIA Driver
```bash
# Must pass before installing toolkit
nvidia-smi
```

#### Check 2: Docker Running
```bash
# Docker daemon must be active
sudo systemctl status docker
```

**Fix:**
```bash
# Install toolkit
./scripts/docker-nvidia-install.sh

# Verify
docker run --rm --gpus all nvidia/cuda:12.4.0-base nvidia-smi
```

### Symptom: Flatpak Installation Fails

#### Check: Flathub Remote
```bash
# Check remotes
flatpak remotes

# Add Flathub if missing
flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
```

**Fix:**
```bash
# Run installation script
./scripts/install-flatpaks.sh

# Or manually
flatpak install -y flathub app-id
```

---

## Layer 4: Home-Manager Issues

### Symptom: `home-manager switch` Fails

#### Check 1: Nix Installation
```bash
# Verify Nix works
nix --version

# Source profile
source ~/.nix-profile/etc/profile.d/nix.sh
```

#### Check 2: Flake Syntax
```bash
# Check flake syntax
nix flake check ~/git/home

# Show flake info
nix flake show ~/git/home
```

#### Check 3: Build Logs
```bash
# Verbose output
home-manager switch --flake ~/git/home --show-trace

# Check specific package
nix build ~/git/home#homeConfigurations.jay.activationPackage --show-trace
```

**Common causes:**
- Syntax errors in `.nix` files
- Non-existent packages
- Conflicting packages
- Network issues downloading packages

**Fix:**
```bash
# Fix syntax errors
nix-instantiate --parse home/modules/problematic.nix

# Search for package
nix search nixpkgs package-name

# Update flake
cd ~/git/home
nix flake update
home-manager switch --flake .
```

### Symptom: TeX Installation Fails

#### Check: Scheme
```bash
# Verify using scheme-medium
grep -r "texlive" home/modules/development.nix
# Should be: texlive.combined.scheme-medium
```

**Fix:**
```bash
# Correct to scheme-medium
$EDITOR home/modules/development.nix

# Rebuild
home-manager switch --flake ~/git/home
```

### Symptom: Elixir/Erlang Build Fails

#### Check: Build Dependencies
```bash
# Verify dependencies installed
nix-env -q | grep -E "autoconf|openssl|ncurses"
```

**Fix:**
```bash
# Install via asdf (after Home-Manager switch)
asdf plugin add erlang
asdf plugin add elixir

# Install with dependencies
export KERL_BUILD_DOCS=yes
asdf install erlang 28.1
asdf install elixir 1.18.4-otp-28
```

---

## GPU Issues

### Symptom: `nvidia-smi` Not Found

#### Check 1: Driver Installation
```bash
# Check if driver installed
sudo zypper se -i nvidia

# Check loaded modules
lsmod | grep nvidia
```

**Fix:**
```bash
# Install driver
sudo zypper install -y nvidia-open-driver-G06-signed

# Load module
sudo modprobe nvidia

# Reboot
sudo reboot
```

### Symptom: GPU Not Visible in Docker

#### Check 1: Container Toolkit
```bash
# Check toolkit installed
rpm -qa | grep nvidia-container-toolkit
```

#### Check 2: Docker Configuration
```bash
# Check runtime configured
docker info | grep -i nvidia

# Should show: Runtimes: nvidia
```

**Fix:**
```bash
# Install toolkit
./scripts/docker-nvidia-install.sh

# Verify
docker run --rm --gpus all nvidia/cuda:12.4.0-base nvidia-smi
```

---

## Boot Issues

### Symptom: System Won't Boot

#### Emergency Boot
```bash
# Boot from USB
# Mount root partition
sudo mount /dev/sdXn /mnt

# Check for errors
sudo journalctl --root=/mnt -b -1 -p err

# Chroot for repairs
sudo mount --bind /dev /mnt/dev
sudo mount --bind /proc /mnt/proc
sudo mount --bind /sys /mnt/sys
sudo chroot /mnt
```

### Symptom: Boot Hangs at NVIDIA

#### Check: NVIDIA Module
```bash
# Add kernel parameter (temporary)
# At GRUB, press 'e' and add:
modprobe.blacklist=nouveau

# Or boot with:
nomodeset
```

**Permanent fix:**
```bash
# Blacklist nouveau
echo "blacklist nouveau" | sudo tee /etc/modprobe.d/blacklist-nouveau.conf
sudo dracut --force

# Reboot
sudo reboot
```

---

## Network Issues

### Symptom: No Network Connectivity

#### Check 1: Interface Status
```bash
# List interfaces
ip link show

# Check NetworkManager
sudo systemctl status NetworkManager

# Restart NetworkManager
sudo systemctl restart NetworkManager
```

#### Check 2: DNS Resolution
```bash
# Test DNS
nslookup google.com

# Check resolv.conf
cat /etc/resolv.conf

# Check DNS service
resolvectl status
```

**Fix:**
```bash
# Use public DNS temporarily
echo "nameserver 1.1.1.1" | sudo tee /etc/resolv.conf

# Or configure NetworkManager
nmcli connection modify "Connection Name" ipv4.dns "1.1.1.1,1.0.0.1"
nmcli connection up "Connection Name"
```

---

## Performance Issues

### Symptom: System Slow

#### Check 1: Disk Space
```bash
# Check space
df -h

# Find large files
sudo du -sh /* | sort -h

# Clean up
nix-collect-garbage -d
docker system prune -a
```

#### Check 2: Memory Usage
```bash
# Check memory
free -h

# Find memory hogs
ps aux --sort=-%mem | head -10
```

#### Check 3: CPU Usage
```bash
# Check CPU
htop

# Find CPU hogs
ps aux --sort=-%cpu | head -10
```

---

## Rollback Procedures

### Btrfs Snapshot Rollback
```bash
# List snapshots
sudo snapper list

# Rollback to snapshot
sudo snapper rollback <snapshot-number>

# Reboot
sudo reboot
```

### Nix Generation Rollback
```bash
# List generations
home-manager generations

# Rollback
home-manager rollback

# Or specific generation
/nix/store/...-activation-script
```

---

## Logging Best Practices

### Collect Diagnostic Info
```bash
# Create diagnostic report
cat > diagnostic-$(date +%Y%m%d).log <<EOF
=== System Info ===
$(uname -a)
$(lsb_release -a)

=== Hardware ===
$(lspci | grep -i nvidia)

=== Services ===
$(sudo systemctl status geckoforge-* --no-pager)

=== Recent Errors ===
$(journalctl -b -p err --no-pager)

=== Disk Space ===
$(df -h)

=== Memory ===
$(free -h)
EOF
```

### Share for Help
```bash
# Sanitize logs (remove sensitive info)
sed -i 's/192\.168\.[0-9]\+\.[0-9]\+/XXX.XXX.XXX.XXX/g' diagnostic.log
sed -i 's/[A-Za-z0-9._%+-]\+@[A-Za-z0-9.-]\+\.[A-Za-z]\{2,\}/EMAIL_REDACTED/g' diagnostic.log

# Upload to pastebin/gist
cat diagnostic.log
```

---

## Prevention Strategies

### Before Major Changes
```bash
# Create Btrfs snapshot
sudo snapper create --description "Before major change"

# Note generation number
home-manager generations
```

### Regular Maintenance
```bash
# Weekly checks
sudo zypper patch  # Security updates
nix flake update  # Update Nix packages
docker system prune  # Clean Docker
```

---

## When to Reinstall

### Nuclear Option Checklist
- [ ] Tried rollback (Btrfs + Nix)
- [ ] Checked all logs
- [ ] Isolated the issue
- [ ] Documented the problem
- [ ] Backed up data
- [ ] ISO available and tested

If all above checked, reinstall may be faster than debugging.