---
description: Backup strategies with rclone encryption, external HDDs, and future onsite server
globs: ["scripts/*backup*.sh", "home/modules/*backup*.nix", ".rclone.conf"]
alwaysApply: false
version: 0.3.0
---

## Use when
- Setting up backup infrastructure
- Performing backups or restores
- Planning disaster recovery
- Configuring rclone for offsite backups

## Backup Philosophy

**3-2-1 Rule: 3 copies, 2 media types, 1 offsite**

- **Local**: Multiple external HDDs (rotating)
- **Config**: Git repository (geckoforge)
- **Offsite**: Encrypted rclone (cloud storage)
- **Future**: Onsite backup server (NAS)

---

## Backup Tiers

### Tier 1: Critical (Daily/Weekly)
- Git repositories (`~/git/`)
- IDE configurations (VS Code, Cursor, Kiro, Void)
- SSH keys (`~/.ssh/`)
- GPG keys (`~/.gnupg/`)
- Browser profiles (bookmarks, passwords via Bitwarden)
- Documents (`~/Documents/`)
- Configuration files (`~/.config/`, `~/.local/`)

### Tier 2: Important (Weekly/Monthly)
- Projects in progress (`~/projects/`)
- Database dumps
- Docker volumes (if any persistent data)
- Virtual machines (if any)

### Tier 3: Archival (Monthly/Quarterly)
- Old projects
- Media files (photos, videos)
- Large datasets
- Historical snapshots

---

## Configuration Backup (Git)

### Already Handled
- ✅ geckoforge repository (ISO builder)
- ✅ home/ directory (Home-Manager config)
- ✅ scripts/ (user setup scripts)
- ✅ docs/ (documentation)

### Best Practice
```bash
# Daily workflow
cd ~/git/geckoforge
git add .
git commit -m "config: update X"
git push

# Automatic via cron (future)
# See automation section below
```

---

## External HDD Backup

### Setup (Layer 3: User Setup)

#### HDD Preparation
```bash
# scripts/setup-backup-hdd.sh
#!/usr/bin/env bash
set -euo pipefail

echo "[backup] Preparing external HDD..."

# Identify HDD
lsblk
read -p "Enter device (e.g., sdb): " DEVICE

# Format with LUKS encryption
sudo cryptsetup luksFormat "/dev/$DEVICE" --type luks2

# Open encrypted volume
sudo cryptsetup open "/dev/$DEVICE" backup_hdd

# Create Btrfs filesystem
sudo mkfs.btrfs /dev/mapper/backup_hdd

# Create mount point
sudo mkdir -p /media/backup

# Mount
sudo mount /dev/mapper/backup_hdd /media/backup

# Set ownership
sudo chown -R "$USER:$USER" /media/backup

echo "[backup] HDD ready at /media/backup"
```

#### Backup Script
```bash
# scripts/backup-to-hdd.sh
#!/usr/bin/env bash
set -euo pipefail

BACKUP_ROOT="/media/backup"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="$BACKUP_ROOT/backup_$TIMESTAMP"

echo "[backup] Starting backup to $BACKUP_DIR..."

# Create backup directory
mkdir -p "$BACKUP_DIR"

# Backup git repositories
echo "Backing up git repositories..."
rsync -avh --progress ~/git/ "$BACKUP_DIR/git/"

# Backup IDE configurations
echo "Backing up IDE configs..."
mkdir -p "$BACKUP_DIR/ide"
cp -r ~/.config/Code "$BACKUP_DIR/ide/vscode" 2>/dev/null || true
cp -r ~/.cursor "$BACKUP_DIR/ide/cursor" 2>/dev/null || true
cp -r ~/.config/Kiro "$BACKUP_DIR/ide/kiro" 2>/dev/null || true
cp -r ~/.config/Void "$BACKUP_DIR/ide/void" 2>/dev/null || true

# Backup SSH/GPG keys
echo "Backing up keys..."
mkdir -p "$BACKUP_DIR/keys"
cp -r ~/.ssh "$BACKUP_DIR/keys/ssh"
cp -r ~/.gnupg "$BACKUP_DIR/keys/gnupg"

# Backup documents
echo "Backing up documents..."
rsync -avh --progress ~/Documents/ "$BACKUP_DIR/documents/"

# Backup config files
echo "Backing up configs..."
rsync -avh --progress ~/.config/ "$BACKUP_DIR/config/"

# Create manifest
cat > "$BACKUP_DIR/MANIFEST.txt" <<EOF
Backup created: $TIMESTAMP
Hostname: $(hostname)
User: $USER
Kernel: $(uname -r)

Contents:
- git/          Git repositories
- ide/          IDE configurations
- keys/         SSH and GPG keys
- documents/    User documents
- config/       Application configs
EOF

echo "[backup] Backup complete: $BACKUP_DIR"
echo "Total size: $(du -sh "$BACKUP_DIR" | cut -f1)"

# Keep only last 5 backups
cd "$BACKUP_ROOT"
ls -t | tail -n +6 | xargs -r rm -rf

echo "[backup] Old backups pruned (kept 5 most recent)"
```

### Restore Script
```bash
# scripts/restore-from-hdd.sh
#!/usr/bin/env bash
set -euo pipefail

BACKUP_ROOT="/media/backup"

# List available backups
echo "Available backups:"
ls -1 "$BACKUP_ROOT" | grep "backup_"

read -p "Enter backup to restore (e.g., backup_20250106_120000): " BACKUP

BACKUP_DIR="$BACKUP_ROOT/$BACKUP"

if [ ! -d "$BACKUP_DIR" ]; then
    echo "❌ Backup not found"
    exit 1
fi

echo "[restore] Restoring from $BACKUP_DIR..."
cat "$BACKUP_DIR/MANIFEST.txt"
echo ""

read -p "Continue with restore? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 0
fi

# Restore git repositories
rsync -avh --progress "$BACKUP_DIR/git/" ~/git/

# Restore IDE configs
rsync -avh --progress "$BACKUP_DIR/ide/vscode/" ~/.config/Code/
rsync -avh --progress "$BACKUP_DIR/ide/cursor/" ~/.cursor/

# Restore keys (careful!)
read -p "Restore SSH/GPG keys? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    cp -r "$BACKUP_DIR/keys/ssh" ~/.ssh
    cp -r "$BACKUP_DIR/keys/gnupg" ~/.gnupg
    chmod 700 ~/.ssh
    chmod 600 ~/.ssh/*
fi

# Restore documents
rsync -avh --progress "$BACKUP_DIR/documents/" ~/Documents/

echo "[restore] Restore complete!"
```

---

## Rclone Offsite Backup (Encrypted)

### Installation (Layer 4: Home-Manager)

```nix
# home/modules/backup.nix
{ pkgs, ... }:

{
  home.packages = with pkgs; [
    rclone
  ];

  # Rclone configuration template
  # Actual config with credentials in ~/.config/rclone/rclone.conf
}
```

### Rclone Configuration

```bash
# scripts/setup-rclone.sh
#!/usr/bin/env bash
set -euo pipefail

echo "[rclone] Setting up encrypted cloud backup..."

# Interactive configuration
rclone config

# Example configuration for encrypted remote:
# 1. Create remote for cloud provider (e.g., "cloud")
# 2. Create encrypted remote on top (e.g., "encrypted")
#    - Storage: crypt
#    - Remote: cloud:backup
#    - Filename encryption: standard
#    - Directory encryption: true
#    - Password: [use strong password]

echo "[rclone] Configuration complete"
echo "Test: rclone ls encrypted:"
```

### Rclone Backup Script

```bash
# scripts/backup-to-cloud.sh
#!/usr/bin/env bash
set -euo pipefail

REMOTE="encrypted:"  # Encrypted rclone remote
TIMESTAMP=$(date +%Y%m%d)

echo "[rclone] Starting offsite backup..."

# Backup git repositories
echo "Backing up git repositories..."
rclone sync ~/git/ "$REMOTE/git/" \
  --progress \
  --exclude ".git/objects/**" \
  --exclude "node_modules/**" \
  --exclude "target/**" \
  --exclude "*.iso"

# Backup IDE configurations
echo "Backing up IDE configs..."
rclone sync ~/.config/Code/User/ "$REMOTE/ide/vscode/" --progress
rclone sync ~/.cursor/ "$REMOTE/ide/cursor/" --progress

# Backup documents (selective)
echo "Backing up documents..."
rclone sync ~/Documents/ "$REMOTE/documents_$TIMESTAMP/" \
  --progress \
  --exclude "*.tmp" \
  --exclude "*.cache"

# Backup keys (ENCRYPTED rclone remote required!)
echo "Backing up keys..."
rclone sync ~/.ssh/ "$REMOTE/keys/ssh/" --progress
rclone sync ~/.gnupg/ "$REMOTE/keys/gnupg/" --progress

echo "[rclone] Offsite backup complete"
rclone size "$REMOTE"
```

### Rclone Restore Script

```bash
# scripts/restore-from-cloud.sh
#!/usr/bin/env bash
set -euo pipefail

REMOTE="encrypted:"

echo "[rclone] Available backups:"
rclone lsd "$REMOTE"

read -p "Continue with restore? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 0
fi

# Restore git repositories
rclone sync "$REMOTE/git/" ~/git/ --progress

# Restore IDE configs
rclone sync "$REMOTE/ide/vscode/" ~/.config/Code/User/ --progress
rclone sync "$REMOTE/ide/cursor/" ~/.cursor/ --progress

# Restore keys
read -p "Restore SSH/GPG keys? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    rclone sync "$REMOTE/keys/ssh/" ~/.ssh/ --progress
    rclone sync "$REMOTE/keys/gnupg/" ~/.gnupg/ --progress
    chmod 700 ~/.ssh
    chmod 600 ~/.ssh/*
fi

echo "[rclone] Cloud restore complete"
```

---

## Automation (Future)

### Daily Backup Cron

```bash
# Add to crontab (after testing manually)
# crontab -e

# Daily backup to HDD at 2 AM (if mounted)
0 2 * * * [ -d /media/backup ] && ~/git/geckoforge/scripts/backup-to-hdd.sh

# Weekly offsite backup on Sundays at 3 AM
0 3 * * 0 ~/git/geckoforge/scripts/backup-to-cloud.sh

# Daily git push at midnight
0 0 * * * cd ~/git/geckoforge && git add . && git commit -m "auto: daily snapshot" && git push || true
```

### Systemd Timer (Alternative)

```bash
# ~/.config/systemd/user/backup.service
[Unit]
Description=Daily Backup to External HDD

[Service]
Type=oneshot
ExecStart=%h/git/geckoforge/scripts/backup-to-hdd.sh
```

```bash
# ~/.config/systemd/user/backup.timer
[Unit]
Description=Daily Backup Timer

[Timer]
OnCalendar=daily
Persistent=true

[Install]
WantedBy=timers.target
```

```bash
# Enable timer
systemctl --user enable --now backup.timer
systemctl --user list-timers
```

---

## Future: Onsite Backup Server (NAS)

### When Implemented

**Hardware**: Dedicated NAS or repurposed PC with large drives

**Software Options**:
- TrueNAS Core (FreeBSD-based)
- TrueNAS Scale (Linux-based)
- OpenMediaVault
- Or simple rsync server

**Integration**:
```bash
# scripts/backup-to-nas.sh
#!/usr/bin/env bash
set -euo pipefail

NAS_HOST="backup.local"
NAS_PATH="/mnt/backups/workstation"

echo "[nas] Backing up to onsite server..."

rsync -avh --progress \
  ~/git/ \
  ~/Documents/ \
  ~/.config/ \
  "$NAS_HOST:$NAS_PATH/"

echo "[nas] Backup complete"
```

---

## Disaster Recovery Plan

### Complete System Loss

1. **Reinstall from ISO**
   - Boot geckoforge ISO
   - Install to disk
   - Complete first-boot automation

2. **Restore Configuration**
   ```bash
   git clone https://github.com/user/geckoforge.git ~/git/geckoforge
   cd ~/git/geckoforge/home
   home-manager switch --flake .
   ```

3. **Restore Data**
   ```bash
   # From external HDD
   ./scripts/restore-from-hdd.sh
   
   # Or from cloud
   ./scripts/restore-from-cloud.sh
   ```

4. **Restore IDE Extensions**
   ```bash
   # See 75-ide-config.mdc for details
   ./scripts/restore-ide-configs.sh
   ```

5. **Verify**
   - [ ] Git repositories restored
   - [ ] SSH keys work
   - [ ] IDE extensions loaded
   - [ ] Documents accessible
   - [ ] Projects build successfully

---

## Backup Testing

### Monthly Verification

```bash
# Test backup script
./scripts/backup-to-hdd.sh
# Check output for errors

# Test restore (to temporary directory)
mkdir /tmp/restore-test
cd /tmp/restore-test
# Manually restore a few files
# Verify integrity

# Test cloud backup
rclone ls encrypted:
# Verify files are encrypted and accessible
```

---

## Security Best Practices

### External HDD
- ✅ LUKS encryption with strong passphrase
- ✅ Store unlocked only when backing up
- ✅ Physical security (locked location)

### Rclone
- ✅ Encrypted remote (crypt)
- ✅ Strong encryption password (separate from cloud account)
- ✅ Config file permissions: `chmod 600 ~/.config/rclone/rclone.conf`

### Keys/Secrets
- ✅ Never backup to unencrypted destinations
- ✅ Test key restore on fresh system
- ✅ Consider splitting GPG master key (keep offline)

---

## Integration with firstrun-user.sh

```bash
# scripts/firstrun-user.sh (add section)

echo ""
echo "=== Backup Setup ==="
read -p "Setup rclone for offsite backups? (Y/n): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Nn]$ ]]; then
    ./scripts/setup-rclone.sh
fi

echo ""
echo "💾 External HDD backup:"
echo "   1. Connect encrypted HDD"
echo "   2. Run: ./scripts/backup-to-hdd.sh"
echo ""
```

---

## What to Backup (Checklist)

### Critical (Always)
- [ ] `~/git/` - All repositories
- [ ] `~/.ssh/` - SSH keys
- [ ] `~/.gnupg/` - GPG keys
- [ ] IDE configs (see 75-ide-config.mdc)

### Important (Regular)
- [ ] `~/Documents/` - User documents
- [ ] `~/projects/` - Active projects
- [ ] Browser bookmarks (if not using Bitwarden)
- [ ] Database dumps (if applicable)

### Optional (Periodic)
- [ ] `~/Downloads/` (if valuable)
- [ ] `~/.local/share/` (application data)
- [ ] `~/.cache/` (usually skip)

---

## Storage Requirements

### Estimates
- Git repos: 1-10 GB
- IDE configs: < 1 GB
- Keys: < 100 MB
- Documents: varies (5-50 GB typical)
- Total: 10-100 GB

### HDD Recommendations
- Minimum: 500 GB (for multiple versioned backups)
- Recommended: 1-2 TB
- Multiple HDDs: Rotate weekly/monthly