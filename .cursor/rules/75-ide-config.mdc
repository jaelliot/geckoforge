---
description: IDE configuration backup and sync for VS Code, Cursor, Kiro, and Void
globs: ["scripts/*ide*.sh", "home/modules/*ide*.nix"]
alwaysApply: false
version: 0.3.0
---

## Use when
- Setting up IDEs on fresh installation
- Backing up IDE configurations
- Syncing settings across devices
- Managing IDE extensions

## IDE Priority

**Primary**: VS Code, Cursor  
**Secondary**: Kiro (AWS), Void (Ollama)

---

## VS Code Configuration

### Installation (Layer 4: Home-Manager)

```nix
# home/modules/ide.nix
{ pkgs, ... }:

{
  programs.vscode = {
    enable = true;
    
    extensions = with pkgs.vscode-extensions; [
      # Language support
      ms-python.python
      ms-vscode.cpptools
      golang.go
      elixir-lsp.vscode-elixir-ls
      
      # Tools
      github.copilot
      eamodio.gitlens
      esbenp.prettier-vscode
      dbaeumer.vscode-eslint
      
      # Themes
      dracula-theme.theme-dracula
      pkief.material-icon-theme
    ];
    
    userSettings = {
      # Editor
      "editor.fontSize" = 14;
      "editor.fontFamily" = "'JetBrains Mono', 'Fira Code', monospace";
      "editor.fontLigatures" = true;
      "editor.tabSize" = 2;
      "editor.insertSpaces" = true;
      "editor.formatOnSave" = true;
      
      # Files
      "files.autoSave" = "onFocusChange";
      "files.trimTrailingWhitespace" = true;
      
      # Terminal
      "terminal.integrated.fontSize" = 13;
      "terminal.integrated.fontFamily" = "'JetBrains Mono'";
      
      # Git
      "git.autofetch" = true;
      "git.confirmSync" = false;
      
      # Copilot
      "github.copilot.enable" = {
        "*" = true;
      };
    };
  };
}
```

### Settings Backup Location

```bash
~/.config/Code/User/settings.json  # User settings
~/.config/Code/User/keybindings.json  # Keybindings
~/.config/Code/User/snippets/  # Custom snippets
```

### Extension List Backup

```bash
# scripts/backup-vscode-extensions.sh
#!/usr/bin/env bash
set -euo pipefail

OUTPUT="$HOME/git/geckoforge/config/vscode-extensions.txt"

echo "[vscode] Backing up extension list..."

code --list-extensions > "$OUTPUT"

echo "[vscode] Extensions saved to $OUTPUT"
echo "Total: $(wc -l < "$OUTPUT") extensions"
```

### Extension Restore

```bash
# scripts/restore-vscode-extensions.sh
#!/usr/bin/env bash
set -euo pipefail

INPUT="$HOME/git/geckoforge/config/vscode-extensions.txt"

if [ ! -f "$INPUT" ]; then
    echo "❌ Extension list not found: $INPUT"
    exit 1
fi

echo "[vscode] Restoring extensions from $INPUT..."

while read -r extension; do
    echo "Installing: $extension"
    code --install-extension "$extension" --force
done < "$INPUT"

echo "[vscode] Extensions restored"
```

---

## Cursor Configuration

### Installation (Manual or via download)

```bash
# Cursor is VS Code fork, install manually
# Download from: https://cursor.sh/

# Or via Flatpak (if available)
flatpak install flathub com.cursor.Cursor
```

### Settings Location

```bash
~/.cursor/  # All Cursor config
~/.cursor/settings.json
~/.cursor/keybindings.json
```

### Sync with VS Code

```bash
# scripts/sync-cursor-from-vscode.sh
#!/usr/bin/env bash
set -euo pipefail

echo "[cursor] Syncing config from VS Code..."

# Copy settings
cp ~/.config/Code/User/settings.json ~/.cursor/User/settings.json

# Copy keybindings
cp ~/.config/Code/User/keybindings.json ~/.cursor/User/keybindings.json

# Copy snippets
rsync -av ~/.config/Code/User/snippets/ ~/.cursor/User/snippets/

echo "[cursor] Sync complete"
```

### Cursor-Specific Settings

```json
// ~/.cursor/User/settings.json (additions)
{
  // Cursor AI settings
  "cursor.ai.enabled": true,
  "cursor.ai.model": "gpt-4",
  
  // Existing VS Code settings...
}
```

---

## Kiro (AWS IDE)

### Installation

```bash
# Via Flatpak or download from AWS
# https://aws.amazon.com/kiro/

# If Flatpak:
flatpak install flathub com.amazon.Kiro
```

### Settings Location

```bash
~/.config/Kiro/
~/.config/Kiro/settings.json
```

### AWS Integration

```json
// ~/.config/Kiro/settings.json
{
  "aws.profile": "default",
  "aws.region": "us-east-1",
  
  // Editor settings (similar to VS Code)
  "editor.fontSize": 14,
  "editor.fontFamily": "JetBrains Mono"
}
```

### Extension Management

```bash
# Kiro may use different extension system
# Document when Kiro is actually installed
```

---

## Void (Ollama-compatible IDE)

### Installation

```bash
# Via download or Nix (if available)
# Check: https://voideditor.com/

# If in nixpkgs:
home.packages = with pkgs; [ void ];
```

### Settings Location

```bash
~/.config/Void/
~/.config/Void/config.json
```

### Ollama Integration

```json
// ~/.config/Void/config.json
{
  "ollama": {
    "enabled": true,
    "endpoint": "http://localhost:11434",
    "model": "codellama"
  },
  
  "editor": {
    "fontSize": 14,
    "fontFamily": "JetBrains Mono"
  }
}
```

---

## Unified IDE Backup Script

```bash
# scripts/backup-ide-configs.sh
#!/usr/bin/env bash
set -euo pipefail

BACKUP_DIR="$HOME/git/geckoforge/config/ide-backup-$(date +%Y%m%d)"
mkdir -p "$BACKUP_DIR"

echo "[ide] Backing up IDE configurations..."

# VS Code
if [ -d ~/.config/Code ]; then
    echo "Backing up VS Code..."
    mkdir -p "$BACKUP_DIR/vscode"
    cp ~/.config/Code/User/settings.json "$BACKUP_DIR/vscode/" 2>/dev/null || true
    cp ~/.config/Code/User/keybindings.json "$BACKUP_DIR/vscode/" 2>/dev/null || true
    cp -r ~/.config/Code/User/snippets "$BACKUP_DIR/vscode/" 2>/dev/null || true
    code --list-extensions > "$BACKUP_DIR/vscode/extensions.txt"
fi

# Cursor
if [ -d ~/.cursor ]; then
    echo "Backing up Cursor..."
    mkdir -p "$BACKUP_DIR/cursor"
    cp ~/.cursor/User/settings.json "$BACKUP_DIR/cursor/" 2>/dev/null || true
    cp ~/.cursor/User/keybindings.json "$BACKUP_DIR/cursor/" 2>/dev/null || true
    cp -r ~/.cursor/User/snippets "$BACKUP_DIR/cursor/" 2>/dev/null || true
fi

# Kiro
if [ -d ~/.config/Kiro ]; then
    echo "Backing up Kiro..."
    mkdir -p "$BACKUP_DIR/kiro"
    cp -r ~/.config/Kiro/* "$BACKUP_DIR/kiro/" 2>/dev/null || true
fi

# Void
if [ -d ~/.config/Void ]; then
    echo "Backing up Void..."
    mkdir -p "$BACKUP_DIR/void"
    cp -r ~/.config/Void/* "$BACKUP_DIR/void/" 2>/dev/null || true
fi

echo "[ide] Backup complete: $BACKUP_DIR"
tree "$BACKUP_DIR"
```

---

## Unified IDE Restore Script

```bash
# scripts/restore-ide-configs.sh
#!/usr/bin/env bash
set -euo pipefail

BACKUP_DIR="$1"

if [ -z "$BACKUP_DIR" ] || [ ! -d "$BACKUP_DIR" ]; then
    echo "Usage: $0 <backup-directory>"
    echo ""
    echo "Available backups:"
    ls -1 ~/git/geckoforge/config/ | grep "ide-backup-"
    exit 1
fi

echo "[ide] Restoring IDE configurations from $BACKUP_DIR..."

# VS Code
if [ -d "$BACKUP_DIR/vscode" ]; then
    echo "Restoring VS Code..."
    mkdir -p ~/.config/Code/User
    cp "$BACKUP_DIR/vscode/settings.json" ~/.config/Code/User/ 2>/dev/null || true
    cp "$BACKUP_DIR/vscode/keybindings.json" ~/.config/Code/User/ 2>/dev/null || true
    cp -r "$BACKUP_DIR/vscode/snippets" ~/.config/Code/User/ 2>/dev/null || true
    
    # Restore extensions
    if [ -f "$BACKUP_DIR/vscode/extensions.txt" ]; then
        echo "Restoring VS Code extensions..."
        while read -r ext; do
            code --install-extension "$ext" --force
        done < "$BACKUP_DIR/vscode/extensions.txt"
    fi
fi

# Cursor
if [ -d "$BACKUP_DIR/cursor" ]; then
    echo "Restoring Cursor..."
    mkdir -p ~/.cursor/User
    cp "$BACKUP_DIR/cursor/settings.json" ~/.cursor/User/ 2>/dev/null || true
    cp "$BACKUP_DIR/cursor/keybindings.json" ~/.cursor/User/ 2>/dev/null || true
    cp -r "$BACKUP_DIR/cursor/snippets" ~/.cursor/User/ 2>/dev/null || true
fi

# Kiro
if [ -d "$BACKUP_DIR/kiro" ]; then
    echo "Restoring Kiro..."
    mkdir -p ~/.config/Kiro
    cp -r "$BACKUP_DIR/kiro/"* ~/.config/Kiro/ 2>/dev/null || true
fi

# Void
if [ -d "$BACKUP_DIR/void" ]; then
    echo "Restoring Void..."
    mkdir -p ~/.config/Void
    cp -r "$BACKUP_DIR/void/"* ~/.config/Void/ 2>/dev/null || true
fi

echo "[ide] Restore complete"
```

---

## Font Setup (Required for IDE)

### JetBrains Mono (Recommended)

```nix
# home/modules/ide.nix
{ pkgs, ... }:

{
  home.packages = with pkgs; [
    jetbrains-mono
    fira-code
  ];

  # Font configuration
  fonts.fontconfig.enable = true;
}
```

### Manual Font Installation (if needed)

```bash
# Download from: https://www.jetbrains.com/lp/mono/
mkdir -p ~/.local/share/fonts
cp JetBrainsMono-*.ttf ~/.local/share/fonts/
fc-cache -f -v
```

---

## Common Settings Across IDEs

### Shared Configuration Template

```json
// Common settings for all IDEs
{
  // Editor
  "editor.fontSize": 14,
  "editor.fontFamily": "JetBrains Mono, Fira Code, monospace",
  "editor.fontLigatures": true,
  "editor.tabSize": 2,
  "editor.insertSpaces": true,
  "editor.formatOnSave": true,
  "editor.rulers": [80, 120],
  "editor.wordWrap": "off",
  "editor.minimap.enabled": true,
  
  // Files
  "files.autoSave": "onFocusChange",
  "files.trimTrailingWhitespace": true,
  "files.insertFinalNewline": true,
  "files.exclude": {
    "**/.git": true,
    "**/.svn": true,
    "**/.hg": true,
    "**/CVS": true,
    "**/.DS_Store": true,
    "**/node_modules": true,
    "**/__pycache__": true,
    "**/*.pyc": true
  },
  
  // Terminal
  "terminal.integrated.fontSize": 13,
  "terminal.integrated.fontFamily": "JetBrains Mono",
  "terminal.integrated.defaultProfile.linux": "bash",
  
  // Git
  "git.autofetch": true,
  "git.confirmSync": false,
  "git.enableSmartCommit": true,
  
  // Workbench
  "workbench.colorTheme": "Dracula",
  "workbench.iconTheme": "material-icon-theme",
  "workbench.startupEditor": "welcomePage"
}
```

---

## Extension Recommendations

### VS Code Essential Extensions

```txt
# ~/.config/Code/User/extensions.txt
github.copilot
github.copilot-chat
eamodio.gitlens
esbenp.prettier-vscode
dbaeumer.vscode-eslint
ms-python.python
ms-vscode.cpptools
golang.go
elixir-lsp.vscode-elixir-ls
rust-lang.rust-analyzer
bradlc.vscode-tailwindcss
formulahendry.auto-rename-tag
usernamehw.errorlens
dracula-theme.theme-dracula
pkief.material-icon-theme
```

### Install All at Once

```bash
cat ~/.config/Code/User/extensions.txt | xargs -L 1 code --install-extension
```

---

## IDE-Specific Workflows

### VS Code + Copilot

```bash
# Login to GitHub
code --install-extension github.copilot
# Follow authentication prompts in VS Code
```

### Cursor + AI

```bash
# Cursor has built-in AI
# No separate extension needed
# Configure in settings.json
```

### Kiro + AWS

```bash
# Configure AWS credentials first
aws configure

# Kiro will use ~/.aws/credentials
```

### Void + Ollama

```bash
# Install Ollama (Layer 3 or 4)
# Via Home-Manager:
home.packages = with pkgs; [ ollama ];

# Start Ollama service
ollama serve &

# Pull models
ollama pull codellama
ollama pull llama2

# Void will connect to http://localhost:11434
```

---

## Integration with Backup Strategy

### Daily Backup (via cron)

```bash
# crontab -e
0 0 * * * ~/git/geckoforge/scripts/backup-ide-configs.sh
```

### Before Major Changes

```bash
# Manual backup
./scripts/backup-ide-configs.sh

# Continue with changes
```

---

## Troubleshooting

### Extensions Won't Install (VS Code)

```bash
# Clear cache
rm -rf ~/.vscode/extensions

# Reinstall
./scripts/restore-vscode-extensions.sh
```

### Settings Not Syncing

```bash
# Check file permissions
ls -la ~/.config/Code/User/settings.json

# Should be: -rw-r--r--
chmod 644 ~/.config/Code/User/settings.json
```

### Font Not Showing

```bash
# Rebuild font cache
fc-cache -f -v

# List installed fonts
fc-list | grep -i "jetbrains\|fira"

# Restart IDE
```

---

## Best Practices

### Do:
- ✅ Backup IDE configs before major changes
- ✅ Keep extension lists in version control
- ✅ Use consistent settings across IDEs
- ✅ Test restore process periodically
- ✅ Document custom keybindings

### Don't:
- ❌ Store API keys in settings.json
- ❌ Commit sensitive data to Git
- ❌ Install untrusted extensions
- ❌ Skip backing up snippets
- ❌ Use different fonts across IDEs (inconsistent UX)

---

## Integration with firstrun-user.sh

```bash
# scripts/firstrun-user.sh (add section)

echo ""
echo "=== IDE Configuration ==="
read -p "Restore IDE configurations from backup? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    # List available backups
    ls -1 ~/git/geckoforge/config/ | grep "ide-backup-"
    read -p "Enter backup name: " BACKUP
    ./scripts/restore-ide-configs.sh ~/git/geckoforge/config/"$BACKUP"
fi
```