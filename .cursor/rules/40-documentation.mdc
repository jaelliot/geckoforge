---
description: Documentation governance, structure, and daily summary requirements
globs: ["docs/**/*.md", "README.md", "**/*.md"]
alwaysApply: false
---

## Use when
- Creating or updating documentation
- Writing daily summaries
- Preparing guides or architecture docs
- Recording implementation decisions

## Documentation Structure (REQUIRED)

### Directory Layout:
```
docs/
├── architecture/          # System design and ADRs
│   ├── directory-tree.md
│   └── README.md
├── guides/               # How-to guides
│   ├── deployment/
│   ├── development/
│   └── operations/
├── daily-summaries/      # Daily work logs
│   └── YYYY-MM/
│       └── YYYY-MM-DD.md
├── examples/             # Usage examples
└── resources/            # External resources
```

---

## Daily Summaries (MANDATORY)

### Purpose
- Track progress and decisions
- Document rationale for changes
- Enable handoffs between sessions
- Maintain project history

### File Naming:
```
docs/daily-summaries/2025-01/2025-01-06.md
                    ↑ month   ↑ full date
```

### Required Template:
```markdown
# YYYY-MM-DD — geckoforge Session Summary

## Session Overview
**Date**: [Date]
**Duration**: [Hours]
**Goals**: [What was planned]
**Status**: [Completed/In Progress/Blocked]

## Major Accomplishments
- [Concrete achievement 1]
- [Concrete achievement 2]

## Key Changes

### Files Created
- `path/to/file.ext` - Brief description

### Files Modified
- `path/to/file.ext` - What changed and why

### Files Deleted
- `path/to/file.ext` - Reason for removal

## Architectural Decisions
- **Decision**: [What was decided]
- **Rationale**: [Why]
- **Impact**: [What changes because of this]

## Related Documentation
- [Link to relevant docs]
- [Link to related ADR]

## Next Steps
- [ ] Task 1
- [ ] Task 2

## Blockers/Issues
- [Any blocking issues]
- [Questions that arose]

## Session Metadata
**Status**: [Complete/Paused]  
**Impact**: [High/Medium/Low]  
**Next Action**: [What to do next]
```

### Example Entry:
```markdown
# 2025-01-06 — geckoforge v0.3.0 Migration Session

## Session Overview
**Date**: January 6, 2025
**Duration**: 4 hours
**Goals**: Migrate from Podman to Docker, update TeX to scheme-medium
**Status**: Completed

## Major Accomplishments
- Created comprehensive Docker setup scripts with automatic Podman removal
- Updated all Home-Manager modules for multi-language development
- Documented 4-layer architecture and layer responsibilities

## Key Changes

### Files Created
- `scripts/setup-docker.sh` - Docker installation with automatic Podman cleanup
- `scripts/docker-nvidia-install.sh` - NVIDIA Container Toolkit setup
- `scripts/docker-nvidia-verify.sh` - GPU access verification
- `home/modules/elixir.nix` - Elixir/Erlang environment via asdf

### Files Modified
- `home/modules/development.nix` - Changed TeX from scheme-full to scheme-medium
- `home/modules/desktop.nix` - Replaced Chrome with Chromium
- `scripts/firstrun-user.sh` - Updated flow for Docker setup

### Files Deleted
- `scripts/setup-podman.sh` - Replaced by Docker
- `scripts/podman-nvidia-*.sh` - No longer needed

## Architectural Decisions
- **Decision**: Use Docker exclusively, remove Podman completely
- **Rationale**: User preference, simpler NVIDIA integration, no runtime confusion
- **Impact**: All container scripts rewritten, docs updated

- **Decision**: Use TeX Live scheme-medium instead of scheme-full
- **Rationale**: User requirement, stability on openSUSE Leap, 3GB disk savings
- **Impact**: Sufficient for most use cases, easy upgrade path if needed

## Related Documentation
- Created `docs/podman-to-docker-migration.md`
- Created `docs/tex-verification.md`
- Updated `docs/getting-started.md`

## Next Steps
- [ ] Test ISO build with new configuration
- [ ] Verify all scripts are executable
- [ ] Test installation in VM
- [ ] Deploy to laptop if VM tests pass

## Session Metadata
**Status**: Complete  
**Impact**: High (major architectural change)  
**Next Action**: Build and test ISO
```

---

## Documentation Types

### 1. Getting Started Guide
**Location**: `docs/getting-started.md`  
**Purpose**: First-time user walkthrough  
**Audience**: Users installing geckoforge for the first time

**Required sections:**
- Prerequisites
- ISO build instructions
- Installation steps
- First-boot expectations
- User setup process
- Verification checklist

### 2. Architecture Documentation
**Location**: `docs/architecture/`  
**Purpose**: System design and structure  
**Audience**: Contributors and advanced users

**Required content:**
- System overview diagram
- Layer responsibilities
- Component interactions
- Design decisions (ADRs)

### 3. How-To Guides
**Location**: `docs/guides/`  
**Purpose**: Task-specific instructions  
**Audience**: Users performing specific tasks

**Categories:**
- Deployment: ISO building, installation, first-boot
- Development: Contributing, testing, debugging
- Operations: Updates, rollbacks, maintenance

### 4. Examples
**Location**: `docs/examples/` or `scripts/examples/`  
**Purpose**: Working code samples  
**Audience**: Users wanting to copy-paste solutions

**Examples:**
- Docker Compose configurations
- TeX document templates
- Elixir Phoenix app setup
- CUDA development workflow

---

## Documentation Standards

### Writing Style
- **Clarity**: Use simple, direct language
- **Conciseness**: One concept per paragraph
- **Consistency**: Follow established patterns
- **Completeness**: Include all necessary steps

### Code Blocks
Always include:
- Language identifier
- Comments explaining non-obvious parts
- Expected output (when relevant)

```bash
# Example: Build ISO
./tools/kiwi-build.sh profiles/leap-15.6/kde-nvidia

# Expected output:
# [kiwi] Building ISO...
# [kiwi] ISO created: out/geckoforge-leap156-kde.x86_64-*.iso
```

### File Paths
- Use absolute paths from repo root
- Mark files as created/modified/deleted
- Include brief descriptions

```markdown
### Files Modified
- `home/modules/development.nix` - Added TeX Live scheme-medium
- `scripts/firstrun-user.sh` - Updated Docker installation flow
```

### Links
- Use relative paths for internal docs
- Use full URLs for external resources
- Check links before committing

```markdown
See [Architecture](../architecture/README.md) for details.
Read more at [openSUSE Wiki](https://en.opensuse.org/Portal:Kiwi)
```

---

## Diagrams

### Mermaid (Preferred)
```mermaid
graph TD
    A[ISO Layer] --> B[First-boot Layer]
    B --> C[User-setup Layer]
    C --> D[Home-Manager Layer]
```

### When to diagram:
- Architecture overviews
- Workflow sequences
- Layer interactions
- Component relationships

---

## Maintenance

### Updating Docs
When code changes:
1. Update relevant documentation immediately
2. Check for broken links
3. Update examples if syntax changed
4. Verify commands still work
5. Update daily summary

### Archiving
Old or deprecated docs:
1. Move to `docs/archive/`
2. Add header: `# ARCHIVED - [Date] - [Reason]`
3. Update navigation/links
4. Note replacement in daily summary

---

## Quality Checklist

Before committing documentation:
- [ ] All code blocks have language identifiers
- [ ] File paths are correct and consistent
- [ ] Links work (internal and external)
- [ ] Examples are tested and accurate
- [ ] No sensitive information included
- [ ] Follows template structure
- [ ] Daily summary updated (if applicable)
- [ ] Grammar and spelling checked

---

## Common Patterns

### Referencing Files
```markdown
Edit the main configuration:
`home/home.nix`

Create a new script:
`scripts/your-script.sh`
```

### Step-by-Step Instructions
```markdown
1. Build the ISO:
   ```bash
   ./tools/kiwi-build.sh profiles/leap-15.6/kde-nvidia
   ```

2. Write to USB:
   ```bash
   sudo dd if=out/geckoforge-*.iso of=/dev/sdX bs=4M
   ```

3. Boot from USB and follow installer prompts
```

### Troubleshooting Sections
```markdown
## Troubleshooting

### Issue: Package not found
**Symptom**: Error during `home-manager switch`  
**Cause**: Package name incorrect or not in nixpkgs  
**Fix**:
```bash
nix search nixpkgs package-name
```
```

---

## Documentation Anti-Patterns

### Don't:
- ❌ Skip daily summaries
- ❌ Use relative time references ("yesterday", "last week")
- ❌ Include outdated examples
- ❌ Omit file paths for changed files
- ❌ Write steps without verification
- ❌ Reference Podman in new docs
- ❌ Recommend TeX scheme-full
- ❌ Suggest Ubuntu/Debian patterns on openSUSE

### Do:
- ✅ Use specific dates (YYYY-MM-DD)
- ✅ Include reproducible examples
- ✅ Test all commands before documenting
- ✅ Link to related documentation
- ✅ Update docs alongside code changes
- ✅ Use Docker-only syntax
- ✅ Recommend TeX scheme-medium
- ✅ Use openSUSE-specific commands (zypper)

---

## Version Control

### Commit Messages
Documentation commits should be clear:

```bash
# Good
docs: add Docker GPU verification guide

# Good
docs: update daily summary for 2025-01-06 session

# Good
docs(architecture): clarify 4-layer responsibilities

# Bad
update docs

# Bad
fix
```

### Linking to Code
When documenting features:
```markdown
The Docker setup script (`scripts/setup-docker.sh`) automatically:
- Removes Podman if present
- Installs Docker CE
- Configures user permissions

See the [implementation](../scripts/setup-docker.sh) for details.
```

---

## Review Process

Before merging doc changes:
1. **Self-review**: Read through once, fresh eyes
2. **Link check**: Click all internal links
3. **Command test**: Run all documented commands
4. **Example test**: Test all code examples
5. **Consistency**: Check against style guide
6. **Completeness**: Verify all required sections present

---

## Documentation Workflow

### For New Features:
1. Write feature
2. Document in appropriate guide
3. Add example if applicable
4. Update architecture docs if needed
5. Record in daily summary
6. Update getting-started if user-facing

### For Bug Fixes:
1. Fix bug
2. Add troubleshooting section if recurring
3. Update relevant guide
4. Note fix in daily summary

### For Refactoring:
1. Refactor code
2. Update impacted documentation
3. Verify examples still work
4. Update daily summary
5. Archive obsolete docs if applicable

---

## Special Cases

### Sensitive Information
Never commit:
- ❌ API keys
- ❌ Passwords
- ❌ Personal emails (use placeholders)
- ❌ Internal URLs
- ❌ Private configuration

Use placeholders:
```bash
# Instead of: export API_KEY="sk-abc123..."
export API_KEY="your-api-key-here"
```

### External References
When referencing external docs:
- Include URL and access date
- Quote sparingly
- Summarize in your own words
- Check license allows redistribution

```markdown
According to the [KIWI NG docs](https://osinside.github.io/kiwi/)
(accessed 2025-01-06), image descriptions are...
```

---

## Examples

### Good Documentation Structure:
```markdown
# GPU Container Setup

## Prerequisites
- NVIDIA GPU with driver installed
- Docker installed and running

## Installation

1. Install NVIDIA Container Toolkit:
   ```bash
   ./scripts/docker-nvidia-install.sh
   ```

2. Verify installation:
   ```bash
   docker run --rm --gpus all nvidia/cuda:12.4.0-base nvidia-smi
   ```

## Troubleshooting

### GPU not detected
Check driver installation:
```bash
nvidia-smi
```

## Examples

### CUDA Development
```bash
docker run -it --gpus all nvidia/cuda:12.4.0-devel bash
```

## See Also
- [Docker Setup](docker-setup.md)
- [NVIDIA Driver](nvidia-driver.md)
```

---

## Maintenance Schedule

### Daily:
- Write daily summary if code changed

### Weekly:
- Check for broken links
- Update getting-started if UX changed

### Monthly:
- Review and archive outdated docs
- Update external links
- Verify all examples still work

### Per Release:
- Update version numbers
- Review all getting-started steps
- Test all guides from scratch
- Update screenshots if applicable