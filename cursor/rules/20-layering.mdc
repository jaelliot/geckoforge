---
description: CRITICAL layering rules - where things belong and why (prevents 90% of hallucinations)
alwaysApply: true
globs: ["profiles/**/*", "home/**/*", "scripts/**/*"]
---

## Use when
- **ALWAYS** - Before suggesting ANY change to the repository
- Adding new packages, scripts, or configurations
- Moving files between directories
- Proposing architectural changes

## The Sacred Four Layers (MEMORIZE THIS)

### Mental Model
Think of geckoforge as a **layer cake**:
- Each layer has a **specific purpose**
- Layers **don't skip** (no jumping from Layer 1 to Layer 4)
- Layers **don't mix** (system packages stay out of user configs)
- Each layer has its **own tool** (KIWI, systemd, bash, Nix)

```
User Environment    ← Home-Manager (Nix)        ← Layer 4
       ↑
User Setup         ← Bash scripts              ← Layer 3
       ↑
First Boot         ← Systemd units             ← Layer 2
       ↑
Base System        ← KIWI + zypper             ← Layer 1
```

## Layer 1: KIWI ISO (Base System)

### Purpose
Bake the **absolute minimum** needed to boot and install.

### What Belongs Here
- ✅ OS base (aaa_base, filesystem, glibc, rpm, zypper)
- ✅ Kernel (kernel-default)
- ✅ Desktop environment (KDE Plasma packages)
- ✅ System utilities (NetworkManager, firewalld)
- ✅ Bootloader (GRUB2)
- ✅ Filesystem tools (btrfsprogs, snapper)
- ✅ **Repository configurations** (NVIDIA repo)
- ✅ **First-boot systemd units** (to trigger Layer 2)

### What Does NOT Belong Here
- ❌ User applications (browsers, editors, etc.)
- ❌ Development tools (compilers, interpreters)
- ❌ Docker or container runtimes
- ❌ User-specific configurations
- ❌ Language runtimes (Node.js, Python, Go, etc.)
- ❌ GUI applications beyond KDE basics

### File Locations
```
profiles/leap-15.6/kde-nvidia/
├── config.kiwi.xml                    # KIWI manifest
├── root/                              # Files baked into ISO
│   └── etc/
│       ├── systemd/system/            # First-boot units
│       │   ├── geckoforge-firstboot.service
│       │   ├── geckoforge-nix.service
│       │   └── multi-user.target.wants/
│       ├── zypp/repos.d/              # Repository configs
│       │   └── nvidia.repo
│       ├── snapper/configs/
│       │   └── root
│       └── firefox/policies/
│           └── policies.json
└── scripts/                           # First-boot scripts (Layer 2)
    ├── firstboot-nvidia.sh
    └── firstboot-nix.sh
```

### Decision Rules
Ask: "Does this need to be available **before the user logs in**?"
- **Yes** → Layer 1 (KIWI)
- **No** → Higher layer

Ask: "Is this part of the **base OS**?"
- **Yes** → Layer 1 (KIWI)
- **No** → Higher layer

### Examples

#### ✅ CORRECT (Layer 1)
```xml
<!-- config.kiwi.xml -->
<packages type="image">
  <package>kernel-default</package>
  <package>NetworkManager</package>
  <package>plasma5-desktop</package>
  <package>snapper</package>
</packages>
```

#### ❌ WRONG (User apps in ISO)
```xml
<!-- DON'T DO THIS -->
<packages type="image">
  <package>nodejs</package>        <!-- Should be in Nix -->
  <package>docker</package>        <!-- Should be in scripts -->
  <package>chromium</package>      <!-- Should be in Nix -->
</packages>
```

## Layer 2: First-Boot Automation (Systemd)

### Purpose
Run **one-time system-level setup** automatically on first boot.

### What Belongs Here
- ✅ NVIDIA driver detection & installation
- ✅ Nix multi-user installation
- ✅ System-level one-time configurations
- ✅ Hardware-specific setup (GPU, etc.)

### What Does NOT Belong Here
- ❌ User account creation (installer handles this)
- ❌ User environment setup (that's Layer 4)
- ❌ Docker installation (requires user in docker group)
- ❌ Application installation (that's Layer 3 or 4)

### File Locations
```
profiles/leap-15.6/kde-nvidia/
└── scripts/                           # Referenced by systemd units
    ├── firstboot-nvidia.sh            # Detects GPU, installs driver
    └── firstboot-nix.sh               # Installs Nix daemon-mode
```

### Decision Rules
Ask: "Does this need to run **before the user logs in for the first time**?"
- **Yes** → Layer 2 (first-boot)
- **No** → Layer 3 or 4

Ask: "Does this require **root privileges** and **zero user interaction**?"
- **Yes** → Layer 2 (first-boot)
- **No** → Layer 3 or 4

### Examples

#### ✅ CORRECT (Layer 2)
```bash
# firstboot-nvidia.sh
if lspci | grep -qi 'VGA.*NVIDIA'; then
  echo "[nvidia] GPU detected, installing driver..."
  sudo zypper install -y nvidia-driver-G06
fi
```

#### ❌ WRONG (User setup in first-boot)
```bash
# DON'T DO THIS IN FIRST-BOOT
sudo usermod -aG docker $USER  # User doesn't exist yet!
flatpak install Signal         # User hasn't logged in yet!
```

## Layer 3: User-Setup Scripts (Manual)

### Purpose
Let the **user** run setup after first login.

### What Belongs Here
- ✅ Docker installation (requires user in docker group)
- ✅ NVIDIA Container Toolkit
- ✅ Flatpak application installation
- ✅ Database setup (PostgreSQL containers)
- ✅ Initial Home-Manager bootstrap

### What Does NOT Belong Here
- ❌ System packages (those are Layer 1)
- ❌ Language runtimes (those are Layer 4)
- ❌ User dotfiles (those are Layer 4)
- ❌ First-boot tasks (those are Layer 2)

### File Locations
```
scripts/
├── firstrun-user.sh                   # Main wizard
├── setup-docker.sh                    # Docker + Podman removal
├── docker-nvidia-install.sh           # GPU container toolkit
├── docker-nvidia-verify.sh            # GPU testing
├── install-flatpaks.sh                # GUI apps
└── examples/
    └── postgres-docker-compose/       # Example setups
        ├── docker-compose.yml
        └── README.md
```

### Decision Rules
Ask: "Does this require **user interaction** or **user-specific values**?"
- **Yes** → Layer 3 (user scripts)
- **No** → Layer 2 or 4

Ask: "Does this need the **user to be logged in and in groups**?"
- **Yes** → Layer 3 (user scripts)
- **No** → Layer 2

### Examples

#### ✅ CORRECT (Layer 3)
```bash
# setup-docker.sh
sudo zypper install -y docker docker-compose
sudo usermod -aG docker "$USER"
sudo systemctl enable --now docker
echo "Log out and back in for docker group to take effect"
```

#### ❌ WRONG (System packages in user script)
```bash
# DON'T DO THIS
sudo zypper install -y kernel-default  # Should be in Layer 1
```

## Layer 4: Home-Manager (User Environment)

### Purpose
Manage **user's personal environment** reproducibly via Nix.

### What Belongs Here
- ✅ Development tools (languages, compilers, interpreters)
- ✅ CLI utilities (ripgrep, fd, jq, etc.)
- ✅ Shell configurations (bash, aliases, prompt)
- ✅ Editor configurations (vim, VS Code settings)
- ✅ Browser configurations (Chromium, Firefox)
- ✅ Dotfiles (git config, SSH config, etc.)

### What Does NOT Belong Here
- ❌ System packages (kernel, drivers, etc.)
- ❌ Docker daemon (system service)
- ❌ System-wide configurations (/etc/*)
- ❌ First-boot automation

### File Locations
```
home/
├── flake.nix                          # Nix flake
├── home.nix                           # Main config
└── modules/
    ├── cli.nix                        # Shell utilities
    ├── desktop.nix                    # Chromium, terminals
    ├── development.nix                # Languages, cloud tools
    ├── elixir.nix                     # Elixir/Erlang via asdf
    └── firefox.nix                    # Firefox privacy config
```

### Decision Rules
Ask: "Is this specific to **this user** and not the system?"
- **Yes** → Layer 4 (Home-Manager)
- **No** → Lower layer

Ask: "Would another user on the same machine want **different settings**?"
- **Yes** → Layer 4 (Home-Manager)
- **No** → Lower layer

### Examples

#### ✅ CORRECT (Layer 4)
```nix
# home/modules/development.nix
home.packages = with pkgs; [
  nodejs_22
  go_1_24
  python312
  texlive.combined.scheme-medium
];
```

#### ❌ WRONG (System packages in Nix)
```nix
# DON'T DO THIS
home.packages = with pkgs; [
  linux-kernel           # Should be in Layer 1
  nvidia-driver          # Should be in Layer 2
];
```

## Cross-Layer Communication

### How Layers Interact

```
Layer 4 (HM)    reads from      ~/.nix-profile, ~/git/home
       ↓        triggered by    user running: home-manager switch
Layer 3         runs            user running: scripts/firstrun-user.sh
       ↓        triggered by    user login
Layer 2         runs once       systemd on first boot
       ↓        built from      KIWI profile
Layer 1         contains        base OS, KDE, repos
```

### Data Flow Examples

#### Example 1: Installing a Language
```
User wants: Python 3.12

WRONG (Layer 1):
<package>python312</package>  # In KIWI profile

CORRECT (Layer 4):
home.packages = with pkgs; [ python312 ];  # In Home-Manager
```

#### Example 2: Setting Up Docker
```
User wants: Docker with GPU

WRONG (Layer 1 or 2):
<package>docker</package>  # In KIWI
# OR
firstboot-docker.sh  # In first-boot (user not ready)

CORRECT (Layer 3):
scripts/setup-docker.sh  # User runs manually
scripts/docker-nvidia-install.sh  # After Docker setup
```

#### Example 3: Browser Configuration
```
User wants: Privacy-hardened Chromium

WRONG (Layer 1):
<package>chromium</package>  # In KIWI
# AND
/etc/chromium/default  # System-wide config

CORRECT (Layer 4):
programs.chromium = {
  enable = true;
  extensions = [ ... ];
  commandLineArgs = [ "--disable-background-networking" ];
};
```

## Common Layering Mistakes (AI Hallucinations)

### Mistake 1: User Apps in ISO
❌ **WRONG**: Adding nodejs, docker, or chromium to KIWI profile
✅ **CORRECT**: User apps go in Layer 3 (Flatpak) or Layer 4 (Nix)

### Mistake 2: System Packages in Nix
❌ **WRONG**: Adding kernel, drivers, or systemd to Home-Manager
✅ **CORRECT**: System packages stay in Layer 1 (KIWI) or Layer 2 (first-boot)

### Mistake 3: First-Boot User Setup
❌ **WRONG**: Installing Docker in first-boot (user not in groups yet)
✅ **CORRECT**: Docker goes in Layer 3 (user-run scripts)

### Mistake 4: Manual Steps in First-Boot
❌ **WRONG**: First-boot script that prompts user for input
✅ **CORRECT**: First-boot is fully automated (Layer 2), prompts go in Layer 3

### Mistake 5: Hard-Coded User Paths
❌ **WRONG**: `/home/jay/...` in any layer except Layer 4
✅ **CORRECT**: Use `$HOME` or `~` in scripts, no hardcoded usernames

## Verification Checklist

Before committing any change, verify:

- [ ] **Layer 1 (KIWI)**: Only base OS, KDE, repos, first-boot units?
- [ ] **Layer 2 (First-Boot)**: Only automated, system-level, one-time tasks?
- [ ] **Layer 3 (User Scripts)**: Only user-run, interactive setup?
- [ ] **Layer 4 (Home-Manager)**: Only user environment, dotfiles, dev tools?
- [ ] **No cross-contamination**: System packages not in Nix? User apps not in KIWI?
- [ ] **No skipped layers**: Following the natural progression?
- [ ] **File locations correct**: In the right directory for its layer?

## Emergency Layer Lookup

**Where does X go?**

| Thing | Layer | Location |
|-------|-------|----------|
| Kernel | 1 | KIWI config.kiwi.xml |
| KDE Plasma | 1 | KIWI config.kiwi.xml |
| NVIDIA driver install | 2 | firstboot-nvidia.sh |
| Nix installation | 2 | firstboot-nix.sh |
| Docker daemon | 3 | scripts/setup-docker.sh |
| GPU toolkit | 3 | scripts/docker-nvidia-install.sh |
| Flatpak apps | 3 | scripts/install-flatpaks.sh |
| Node.js | 4 | home/modules/development.nix |
| Python | 4 | home/modules/development.nix |
| Chromium config | 4 | home/modules/desktop.nix |
| Shell aliases | 4 | home/modules/cli.nix |
| Git config | 4 | home/modules/development.nix |

## When in Doubt

Ask yourself:
1. "Who triggers this?" (System boot → Layer 2, User → Layer 3, home-manager → Layer 4)
2. "When does this run?" (First boot → Layer 2, Post-install → Layer 3, Ongoing → Layer 4)
3. "Is this reproducible from Git?" (No → Layer 1 or 2, Yes → Layer 3 or 4)

**Golden Rule**: If you're not 100% sure which layer, **ask before implementing**.